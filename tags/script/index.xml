<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Script on xeBuz personal blog</title>
    <link>http://localhost:1313/blog/tags/script/</link>
    <description>Recent content in Script on xeBuz personal blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Aug 2012 13:55:24 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/tags/script/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Script para generar playlists dinámicas en MPD </title>
      <link>http://localhost:1313/blog/posts/script-para-generar-playlists-dinamicas-en-mpd/</link>
      <pubDate>Fri, 10 Aug 2012 13:55:24 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/posts/script-para-generar-playlists-dinamicas-en-mpd/</guid>
      <description>&lt;p&gt;Revisando scripts viejos, me encontré con este que quizás a alguno le puede servir. La idea es ir generando dinámicamente la lista de reproducción de un server &lt;a href=&#34;http://mpd.wikia.com/&#34;&gt;MPD&lt;/a&gt; usando la &lt;a href=&#34;http://www.last.fm/api&#34;&gt;API&lt;/a&gt; de &lt;a href=&#34;http://www.last.fm/user/xeBuz&#34;&gt;Last.fm&lt;/a&gt; para encontrar artistas similares en el disco.
Si bien ya hay clientes que tienen esta funcionalidad, como &lt;a href=&#34;http://mpd.wikia.com/wiki/Client:Ario&#34;&gt;Ario&lt;/a&gt;, suelo conectarme por SSH al server y me resulta cómodo correr el script este cuando no se que escuchar.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import random
from mpd import (MPDClient, CommandError)
from audioscrobbler import AudioScrobblerQuery

&amp;quot;&amp;quot;&amp;quot; MPD &amp;quot;&amp;quot;&amp;quot;
mpd_host = &#39;localhost&#39;
mpd_port = &#39;6600&#39;
mpd_connection = {&#39;host&#39;: mpd_host, &#39;port&#39;: mpd_port}
client = MPDClient()

COUNT_SONGS = 5

def mpd_connect():
    try:
        client.connect(**mpd_connection)
    except SocketError:
        return False
    return True


def main():
    if not mpd_connect():
        sys.exit(1)

    # Meh, no se si se hace esto, pero bueh
    recommended_artists = []
    recommended_songs = []

    # Obtengo la cancion que esta sonando en este momento
    current = client.currentsong()

    # Saco sólo el artista del diccionario que me devuelve current
    current_artist = AudioScrobblerQuery(artist=current[&#39;artist&#39;])

    # En base a todos los artistas similares, me fijo cuales tengo en el
    # server MPD, y los almaceno para usarlos despues.
    for artist in current_artist.similar():
        if float(client.count(&amp;quot;artist&amp;quot;, artist.name)[&#39;songs&#39;]) &amp;gt; 0:
            recommended_artists.append(artist.name)


    # Podria hacerlo mas efectivo, pero la idea es hacerlo lo mas random que
    # pueda, asi que desordeno la lista de similares, que siempre viene ya
    # ordenada por compatibilidad del current_artist
    random.shuffle(recommended_artists)

    while len(recommended_songs) &amp;lt; COUNT_SONGS:
        artist = random.choice(recommended_artists)
        recommended_songs.append(
                    random.choice(client.search(&#39;artist&#39;, artist)))

    for song in recommended_songs:
        print song[&amp;quot;artist&amp;quot;], &amp;quot;-&amp;quot;, song[&amp;quot;title&amp;quot;]
        client.add(song[&amp;quot;file&amp;quot;])

if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Descarga desde aca: &lt;a href=&#34;https://gist.github.com/1100627&#34;&gt;GIST&lt;/a&gt;, seguramente la iré modificando, la idea es dejarla corriendo como un servicio.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>